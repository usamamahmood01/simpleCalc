{"version":3,"sources":["index.js"],"names":["AutoScalingText","state","scale","this","node","actualScale","parentNode","offsetWidth","setState","className","style","transform","ref","props","children","React","Component","CalculatorDisplay","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","CalculatorKey","onPress","onPoint","CalculatorOperations","prevValue","nextValue","Calculator","displayValue","operator","waitingForOperand","handleKeyDown","event","key","preventDefault","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearLastChar","clearDisplay","clearAll","substring","length","newValue","String","fixedDigits","replace","toFixed","digit","nextOperator","inputValue","currentValue","document","addEventListener","removeEventListener","clearText","toggleSign","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9a0c0afc.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport PointTarget from 'react-point'\r\n\r\nclass AutoScalingText extends React.Component {\r\n  state = {\r\n    scale: 1\r\n  };\r\n  \r\n  componentDidUpdate() {\r\n    const { scale } = this.state\r\n    \r\n    const node = this.node\r\n    const parentNode = node.parentNode\r\n    \r\n    const availableWidth = parentNode.offsetWidth\r\n    const actualWidth = node.offsetWidth\r\n    const actualScale = availableWidth / actualWidth\r\n    \r\n    if (scale === actualScale)\r\n      return\r\n    \r\n    if (actualScale < 1) {\r\n      this.setState({ scale: actualScale })\r\n    } else if (scale < 1) {\r\n      this.setState({ scale: 1 })\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const { scale } = this.state\r\n    \r\n    return (\r\n      <div\r\n        className=\"auto-scaling-text\"\r\n        style={{ transform: `scale(${scale},${scale})` }}\r\n        ref={node => this.node = node}\r\n      >{this.props.children}</div>\r\n    )\r\n  }\r\n}\r\n\r\nclass CalculatorDisplay extends React.Component {\r\n  render() {\r\n    const { value, ...props } = this.props\r\n    \r\n    const language = navigator.language || 'en-US'\r\n    let formattedValue = parseFloat(value).toLocaleString(language, {\r\n      useGrouping: true,\r\n      maximumFractionDigits: 6\r\n    })\r\n    \r\n    // Add back missing .0 in e.g. 12.0\r\n    const match = value.match(/\\.\\d*?(0*)$/)\r\n    \r\n    if (match)\r\n      formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0]\r\n    \r\n    return (\r\n      <div {...props} className=\"calculator-display\">\r\n        <AutoScalingText>{formattedValue}</AutoScalingText>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass CalculatorKey extends React.Component {\r\n  render() {\r\n    const { onPress, className, ...props } = this.props\r\n    \r\n    return (\r\n      <PointTarget onPoint={onPress}>\r\n        <button className={`calculator-key ${className}`} {...props}/>\r\n      </PointTarget>\r\n    )\r\n  }\r\n}\r\n\r\nconst CalculatorOperations = {\r\n  '/': (prevValue, nextValue) => prevValue / nextValue,\r\n  '*': (prevValue, nextValue) => prevValue * nextValue,\r\n  '+': (prevValue, nextValue) => prevValue + nextValue,\r\n  '-': (prevValue, nextValue) => prevValue - nextValue,\r\n  '=': (prevValue, nextValue) => nextValue\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n  state = {\r\n    value: null,\r\n    displayValue: '0',\r\n    operator: null,\r\n    waitingForOperand: false\r\n  };\r\n  \r\n  clearAll() {\r\n    this.setState({\r\n      value: null,\r\n      displayValue: '0',\r\n      operator: null,\r\n      waitingForOperand: false\r\n    })\r\n  }\r\n\r\n  clearDisplay() {\r\n    this.setState({\r\n      displayValue: '0'\r\n    })\r\n  }\r\n  \r\n  clearLastChar() {\r\n    const { displayValue } = this.state\r\n    \r\n    this.setState({\r\n      displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\r\n    })\r\n  }\r\n  \r\n  toggleSign() {\r\n    const { displayValue } = this.state\r\n    const newValue = parseFloat(displayValue) * -1\r\n    \r\n    this.setState({\r\n      displayValue: String(newValue)\r\n    })\r\n  }\r\n  \r\n  inputPercent() {\r\n    const { displayValue } = this.state\r\n    const currentValue = parseFloat(displayValue)\r\n    \r\n    if (currentValue === 0)\r\n      return\r\n    \r\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '')\r\n    const newValue = parseFloat(displayValue) / 100\r\n    \r\n    this.setState({\r\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2))\r\n    })\r\n  }\r\n  \r\n  inputDot() {\r\n    const { displayValue } = this.state\r\n    \r\n    if (!(/\\./).test(displayValue)) {\r\n      this.setState({\r\n        displayValue: displayValue + '.',\r\n        waitingForOperand: false\r\n      })\r\n    }\r\n  }\r\n  \r\n  inputDigit(digit) {\r\n    const { displayValue, waitingForOperand } = this.state\r\n    \r\n    if (waitingForOperand) {\r\n      this.setState({\r\n        displayValue: String(digit),\r\n        waitingForOperand: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\r\n      })\r\n    }\r\n  }\r\n  \r\n  performOperation(nextOperator) {    \r\n    const { value, displayValue, operator } = this.state\r\n    const inputValue = parseFloat(displayValue)\r\n    \r\n    if (value == null) {\r\n      this.setState({\r\n        value: inputValue\r\n      })\r\n    } else if (operator) {\r\n      const currentValue = value || 0\r\n      const newValue = CalculatorOperations[operator](currentValue, inputValue)\r\n      \r\n      this.setState({\r\n        value: newValue,\r\n        displayValue: String(newValue)\r\n      })\r\n    }\r\n    \r\n    this.setState({\r\n      waitingForOperand: true,\r\n      operator: nextOperator\r\n    })\r\n  }\r\n  \r\n  handleKeyDown = (event) => {\r\n    let { key } = event\r\n    \r\n    if (key === 'Enter')\r\n      key = '='\r\n    \r\n    if ((/\\d/).test(key)) {\r\n      event.preventDefault()\r\n      this.inputDigit(parseInt(key, 10))\r\n    } else if (key in CalculatorOperations) {\r\n      event.preventDefault()\r\n      this.performOperation(key)\r\n    } else if (key === '.') {\r\n      event.preventDefault()\r\n      this.inputDot()\r\n    } else if (key === '%') {\r\n      event.preventDefault()\r\n      this.inputPercent()\r\n    } else if (key === 'Backspace') {\r\n      event.preventDefault()\r\n      this.clearLastChar()\r\n    } else if (key === 'Clear') {\r\n      event.preventDefault()\r\n      \r\n      if (this.state.displayValue !== '0') {\r\n        this.clearDisplay()\r\n      } else {\r\n        this.clearAll()\r\n      }\r\n    }\r\n  };\r\n  \r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyDown)\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyDown)\r\n  }\r\n  \r\n  render() {\r\n    const { displayValue } = this.state\r\n    \r\n    const clearDisplay = displayValue !== '0'\r\n    const clearText = clearDisplay ? 'C' : 'AC'\r\n    \r\n    return (\r\n      <div className=\"calculator\">\r\n        <CalculatorDisplay value={displayValue}/>\r\n        <div className=\"calculator-keypad\">\r\n          <div className=\"input-keys\">\r\n            <div className=\"function-keys\">\r\n              <CalculatorKey className=\"key-clear\" onPress={() => clearDisplay ? this.clearDisplay() : this.clearAll()}>{clearText}</CalculatorKey>\r\n              <CalculatorKey className=\"key-sign\" onPress={() => this.toggleSign()}>±</CalculatorKey>\r\n              <CalculatorKey className=\"key-percent\" onPress={() => this.inputPercent()}>%</CalculatorKey>\r\n            </div>\r\n            <div className=\"digit-keys\">\r\n              <CalculatorKey className=\"key-0\" onPress={() => this.inputDigit(0)}>0</CalculatorKey>\r\n              <CalculatorKey className=\"key-dot\" onPress={() => this.inputDot()}>●</CalculatorKey>\r\n              <CalculatorKey className=\"key-1\" onPress={() => this.inputDigit(1)}>1</CalculatorKey>\r\n              <CalculatorKey className=\"key-2\" onPress={() => this.inputDigit(2)}>2</CalculatorKey>\r\n              <CalculatorKey className=\"key-3\" onPress={() => this.inputDigit(3)}>3</CalculatorKey>\r\n              <CalculatorKey className=\"key-4\" onPress={() => this.inputDigit(4)}>4</CalculatorKey>\r\n              <CalculatorKey className=\"key-5\" onPress={() => this.inputDigit(5)}>5</CalculatorKey>\r\n              <CalculatorKey className=\"key-6\" onPress={() => this.inputDigit(6)}>6</CalculatorKey>\r\n              <CalculatorKey className=\"key-7\" onPress={() => this.inputDigit(7)}>7</CalculatorKey>\r\n              <CalculatorKey className=\"key-8\" onPress={() => this.inputDigit(8)}>8</CalculatorKey>\r\n              <CalculatorKey className=\"key-9\" onPress={() => this.inputDigit(9)}>9</CalculatorKey>\r\n            </div>\r\n          </div>\r\n          <div className=\"operator-keys\">\r\n            <CalculatorKey className=\"key-divide\" onPress={() => this.performOperation('/')}>÷</CalculatorKey>\r\n            <CalculatorKey className=\"key-multiply\" onPress={() => this.performOperation('*')}>×</CalculatorKey>\r\n            <CalculatorKey className=\"key-subtract\" onPress={() => this.performOperation('-')}>−</CalculatorKey>\r\n            <CalculatorKey className=\"key-add\" onPress={() => this.performOperation('+')}>+</CalculatorKey>\r\n            <CalculatorKey className=\"key-equals\" onPress={() => this.performOperation('=')}>=</CalculatorKey>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Calculator/>,\r\n  document.getElementById('app')\r\n)"],"sourceRoot":""}